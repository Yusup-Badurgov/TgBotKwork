import sqlite3
import telebot
from telebot import types
import logging
import gspread
from google.oauth2.service_account import Credentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets
CREDENTIALS_FILE = "quantum-keep-428613-c3-32dc3787140b.json"  # –≤–∞—à —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
SPREADSHEET_ID_1 = "1uaHzlpt6A7V3vhJXoa1_EfgSM9CYiN8ViITuAwTyYIk"
SPREADSHEET_ID_2 = "11jihjH1lIJVd7HaHWHjFFzu-jZEB66CYIuDOfJxdcT0"


# ==== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è GSpread ====
scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=scopes)
gc = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (–ª–∏—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
sh1 = gc.open_by_key(SPREADSHEET_ID_1)
worksheet1 = sh1.sheet1  # –õ–∏—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã 1

sh2 = gc.open_by_key(SPREADSHEET_ID_2)
worksheet2 = sh2.sheet1  # –õ–∏—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã 2

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
TOKEN = "7245958682:AAEczgAtvDYOcvXFtQB1gbyxLdvsVUHyb7s"  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
DIRECTOR_USERNAME = "yubadurgov"  # username –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –±–µ–∑ @, –Ω–∞–ø—Ä–∏–º–µ—Ä director_username

# id –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CHANNEL_ID = -1002250302799  # –ø—Ä–∏–º–µ—Ä

bot = telebot.TeleBot(TOKEN, parse_mode='HTML')

# ==== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ====
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    is_privileged INTEGER DEFAULT 0
);
""")
conn.commit()

def add_user(user_id, username, first_name, last_name):
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: user_id={user_id}, username={username}, first_name={first_name}, last_name={last_name}")
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
                   (user_id, username, first_name, last_name))
    conn.commit()

    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î –ø–æ–ª—É—á–∏–º –µ–≥–æ –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å is_privileged (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    cursor.execute("SELECT user_id, username, first_name, last_name, is_privileged FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()
    if user:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
        # user: (user_id, username, first_name, last_name, is_privileged)
        uid, uname, fname, lname, priv = user

        # –¢–∞–±–ª–∏—Ü–∞ 1: –≤—Å–µ –ø–æ–ª—è
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ 1 —Å—Ç–æ–ª–±—Ü—ã: user_id | username | first_name | last_name | is_privileged
        worksheet1.append_row([uid, uname if uname else '', fname if fname else '', lname if lname else '', priv])

        # –¢–∞–±–ª–∏—Ü–∞ 2: —Ç–æ–ª—å–∫–æ user_id, first_name, last_name
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ 2 —Å—Ç–æ–ª–±—Ü—ã: user_id | first_name | last_name
        worksheet2.append_row([uid, fname if fname else '', lname if lname else ''])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        notify_staff_about_new_user(uid, uname, fname, lname)


def notify_staff_about_new_user(user_id, username, first_name, last_name):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    staff_members = list_staff()
    # staff_members: [(user_id, username, first_name, last_name), ...]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    display_username = f"@{username}" if username else ''
    display_name = f"{first_name or ''} {last_name or ''}".strip()
    text = (
        "<b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>\n\n"
        f"ID: {user_id}\n"
        f"Username: {display_username or '–Ω–µ—Ç'}\n"
        f"–ò–º—è: {first_name or '–Ω–µ—Ç'}\n"
        f"–§–∞–º–∏–ª–∏—è: {last_name or '–Ω–µ—Ç'}\n\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î –∏ Google Sheets."
    )

    for s in staff_members:
        s_uid, s_uname, s_fname, s_lname = s
        try:
            bot.send_message(s_uid, text)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: user_id={s_uid}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É user_id={s_uid}: {e}")

def get_users_count():
    logger.info("–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î")
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    logger.info(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
    return count

def get_users_page(page=1, per_page=10):
    offset = (page - 1) * per_page
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} —Å {per_page} –∑–∞–ø–∏—Å—è–º–∏ (offset={offset})")
    cursor.execute(
        "SELECT user_id, username, first_name, last_name, is_privileged FROM users ORDER BY user_id LIMIT ? OFFSET ?",
        (per_page, offset))
    users = cursor.fetchall()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
    return users

def search_users(query):
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø—Ä–æ—Å–æ–º: {query}")
    q = f"%{query}%"
    if query.isdigit():
        cursor.execute(
            "SELECT user_id, username, first_name, last_name, is_privileged FROM users WHERE user_id = ? OR username LIKE ? OR first_name LIKE ? OR last_name LIKE ?",
            (int(query), q, q, q))
    else:
        cursor.execute(
            "SELECT user_id, username, first_name, last_name, is_privileged FROM users WHERE username LIKE ? OR first_name LIKE ? OR last_name LIKE ?",
            (q, q, q))
    results = cursor.fetchall()
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    return results

def set_privilege(username, value):
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π: username={username}, is_privileged={value}")
    username = username.lstrip('@')
    cursor.execute("UPDATE users SET is_privileged = ? WHERE username = ?", (value, username))
    conn.commit()
    updated = cursor.rowcount > 0
    logger.info(f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {updated}")
    return updated

def list_staff():
    logger.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).")
    cursor.execute("SELECT user_id, username, first_name, last_name FROM users WHERE is_privileged = 1")
    staff = cursor.fetchall()
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(staff)}")
    return staff

def user_has_privileges(username):
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
    if username == DIRECTOR_USERNAME:
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.")
        return True
    username = username.lstrip('@')
    cursor.execute("SELECT is_privileged FROM users WHERE username = ?", (username,))
    res = cursor.fetchone()
    has_privileges = res is not None and res[0] == 1
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'–∏–º–µ–µ—Ç' if has_privileges else '–Ω–µ –∏–º–µ–µ—Ç'} –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏.")
    return has_privileges

def is_director(username):
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º: {username}")
    is_dir = username == DIRECTOR_USERNAME
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'—è–≤–ª—è–µ—Ç—Å—è' if is_dir else '–Ω–µ —è–≤–ª—è–µ—Ç—Å—è'} –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º.")
    return is_dir

def insufficient_rights(message):
    logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username}")
    bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤.")


# ==== –•—ç–Ω–¥–ª–µ—Ä—ã ====

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
@bot.chat_join_request_handler()
def handle_chat_join_request(chat_join_request):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: user_id={chat_join_request.from_user.id}, username={chat_join_request.from_user.username}")
    bot.approve_chat_join_request(chat_join_request.chat.id, chat_join_request.from_user.id)
    user = chat_join_request.from_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: user_id={user.id}, username={user.username}, first_name={user.first_name}, last_name={user.last_name}")



@bot.message_handler(commands=['start'])
def start_cmd(message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    text = ("–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–≠—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ—Ö—Ä–∞–Ω—è—é –∏—Ö –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É,"
            "–¥–æ–±–∞–≤–ª—è—é –∑–∞–ø–∏—Å—å –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã, –∞ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø–æ–∑–≤–æ–ª—è—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. "
            "–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –¥–ª—è —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã—Ö –ª–∏—Ü –¥–æ—Å—Ç—É–ø–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help.")
    bot.reply_to(message, text)


@bot.message_handler(commands=['help'])
def help_cmd(message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.\n\n"
        "<b>–î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        "/list_users [–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã] - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (–ø–æ 10 –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ).\n"
        "/search_users &lt;–∑–∞–ø—Ä–æ—Å&gt; - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username, –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ ID.\n"
        "/list_staff - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∞–º–∏).\n\n"
        "<b>–¢–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:</b>\n"
        "/grant @username - –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
        "/revoke @username - –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
    )
    bot.reply_to(message, text)


@bot.message_handler(commands=['list_users'])
def list_users_cmd(message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /list_users –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    if not user_has_privileges(message.from_user.username):
        logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: user_id={message.from_user.id}, username={message.from_user.username}")
        insufficient_rights(message)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    parts = message.text.split(maxsplit=1)
    page = 1
    if len(parts) > 1 and parts[1].isdigit():
        page = int(parts[1])
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page}")

    send_users_page(message.chat.id, page=page)


def send_users_page(chat_id, page=1, per_page=10, message_id=None):
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: page={page}, per_page={per_page}")
    total_users = get_users_count()
    users = get_users_page(page, per_page)

    if not users:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: page={page}")
        if message_id is not None:
            bot.edit_message_text(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}.", chat_id, message_id)
        else:
            bot.send_message(chat_id, f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}.")
        return

    text = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} (–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ {len(users)} –∏–∑ {total_users}):\n"
    logger.info(f"–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page} –Ω–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {total_users}")
    keyboard = types.InlineKeyboardMarkup()

    for u in users:
        uid, uname, fname, lname, priv = u
        display_name = f"@{uname}" if uname else f"{fname or ''} {lname or ''}".strip()
        if not display_name:
            display_name = str(uid)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫: user_id={uid}, display_name={display_name}")
        keyboard.add(types.InlineKeyboardButton(
            text=f"{display_name}",
            callback_data=f"user_details:{uid}:{page}"
        ))

    buttons = []
    if page > 1:
        buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"users_page:{page - 1}"))
    if page * per_page < total_users:
        buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"users_page:{page + 1}"))
    if buttons:
        keyboard.add(*buttons)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if message_id is not None:
        try:
            bot.edit_message_text(text, chat_id, message_id, reply_markup=keyboard)
        except telebot.apihelper.ApiTelegramException as e:
            if "message is not modified" in str(e):
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: chat_id={chat_id}, message_id={message_id}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        bot.send_message(chat_id, text, reply_markup=keyboard)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: page={page}")



@bot.callback_query_handler(func=lambda call: call.data.startswith('users_page:'))
def callback_users_page(call):
    logger.info(f"–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ 'users_page': user_id={call.from_user.id}, username={call.from_user.username}, data={call.data}")
    if not user_has_privileges(call.from_user.username):
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={call.from_user.id}, username={call.from_user.username}")
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    page = int(call.data.split(':')[1])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page}")
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
    send_users_page(call.message.chat.id, page=page, message_id=call.message.message_id)
    bot.answer_callback_query(call.id)



@bot.callback_query_handler(func=lambda call: call.data.startswith('user_details:'))
def callback_user_details(call):
    logger.info(f"–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ 'user_details': user_id={call.from_user.id}, username={call.from_user.username}, data={call.data}")
    if not user_has_privileges(call.from_user.username):
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={call.from_user.id}, username={call.from_user.username}")
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    _, user_id_str, page_str = call.data.split(':')
    user_id = int(user_id_str)
    page = int(page_str)
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞={page}")

    cursor.execute("SELECT user_id, username, first_name, last_name, is_privileged FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()
    if not user:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    uid, uname, fname, lname, priv = user
    pmark = "‚úÖ" if priv == 1 else "‚ùå"
    text = (f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"ID: {uid}\n"
            f"Username: @{uname if uname else '–Ω–µ—Ç'}\n"
            f"–ò–º—è: {fname or '–Ω–µ—Ç'}\n"
            f"–§–∞–º–∏–ª–∏—è: {lname or '–Ω–µ—Ç'}\n"
            f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: {pmark}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
    logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω: user_id={uid}, username={uname}, privileges={pmark}")

    keyboard = types.InlineKeyboardMarkup()
    if uname:
        keyboard.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"https://t.me/{uname}"))
    else:
        keyboard.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"tg://user?id={uid}"))

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"users_page:{page}"))

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    bot.answer_callback_query(call.id)



# –¢–µ–ø–µ—Ä—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@bot.message_handler(commands=['search_users'])
def search_users_cmd(message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /search_users –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    if not user_has_privileges(message.from_user.username):
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
        insufficient_rights(message)
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /search_users –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: user_id={message.from_user.id}")
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search_users &lt;–∑–∞–ø—Ä–æ—Å&gt")
        return
    query = parts[1].strip()
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫: '{query}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    send_search_page(message.chat.id, query, page=1)


def send_search_page(chat_id, query, page=1, per_page=10, message_id=None):
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: query='{query}', page={page}, per_page={per_page}")
    results = search_users(query)
    total = len(results)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")

    if total == 0:
        logger.warning(f"–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
        if message_id is not None:
            bot.edit_message_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", chat_id, message_id)
        else:
            bot.send_message(chat_id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    start_idx = (page - 1) * per_page
    end_idx = start_idx + per_page
    page_results = results[start_idx:end_idx]

    logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(page_results)} –∏–∑ {total}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
    text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} (–ü–æ–∫–∞–∑–∞–Ω–æ {len(page_results)} –∏–∑ {total})\n"
    keyboard = types.InlineKeyboardMarkup()

    enc_query = query.replace(' ', '%20')

    for u in page_results:
        uid, uname, fname, lname, priv = u
        display_name = f"@{uname}" if uname else f"{fname or ''} {lname or ''}".strip()
        if not display_name:
            display_name = str(uid)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫: user_id={uid}, display_name='{display_name}'")
        keyboard.add(
            types.InlineKeyboardButton(
                text=display_name,
                callback_data=f"search_user_details:{uid}:{page}:{enc_query}"
            )
        )

    buttons = []
    if page > 1:
        buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_page:{page - 1}:{enc_query}"))
    if end_idx < total:
        buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"search_page:{page + 1}:{enc_query}"))

    if buttons:
        keyboard.add(*buttons)

    if message_id is not None:
        try:
            bot.edit_message_text(text, chat_id, message_id, reply_markup=keyboard)
        except telebot.apihelper.ApiTelegramException as e:
            if "message is not modified" in str(e):
                logger.warning(
                    f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: chat_id={chat_id}, message_id={message_id}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        bot.send_message(chat_id, text, reply_markup=keyboard)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: page={page}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('search_page:'))
def callback_search_page(call):
    logger.info(f"–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ 'search_page': user_id={call.from_user.id}, username={call.from_user.username}, data={call.data}")
    if not user_has_privileges(call.from_user.username):
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={call.from_user.id}, username={call.from_user.username}")
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    _, page_str, enc_query = call.data.split(':', 2)
    page = int(page_str)
    query = enc_query.replace('%20', ' ')
    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
    send_search_page(call.message.chat.id, query, page=page, message_id=call.message.message_id)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('search_user_details:'))
def callback_search_user_details(call):
    logger.info(f"–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ 'search_user_details': user_id={call.from_user.id}, username={call.from_user.username}, data={call.data}")
    if not user_has_privileges(call.from_user.username):
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={call.from_user.id}, username={call.from_user.username}")
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    _, uid_str, page_str, enc_query = call.data.split(':', 3)
    user_id = int(uid_str)
    page = int(page_str)
    query = enc_query.replace('%20', ' ')
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞={page}, –∑–∞–ø—Ä–æ—Å='{query}'")

    cursor.execute("SELECT user_id, username, first_name, last_name, is_privileged FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()
    if not user:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    uid, uname, fname, lname, priv = user
    pmark = "‚úÖ" if priv == 1 else "‚ùå"
    text = (f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"ID: {uid}\n"
            f"Username: @{uname if uname else '–Ω–µ—Ç'}\n"
            f"–ò–º—è: {fname or '–Ω–µ—Ç'}\n"
            f"–§–∞–º–∏–ª–∏—è: {lname or '–Ω–µ—Ç'}\n"
            f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: {pmark}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
    logger.info(f"–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={uid}, username={uname}, privileges={pmark}")

    keyboard = types.InlineKeyboardMarkup()
    if uname:
        keyboard.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"https://t.me/{uname}"))
    else:
        keyboard.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"tg://user?id={uid}"))

    enc_query = query.replace(' ', '%20')
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"search_page:{page}:{enc_query}"))

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    bot.answer_callback_query(call.id)



@bot.message_handler(commands=['grant'])
def grant_cmd(message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /grant –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    if not is_director(message.from_user.username):
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /grant: user_id={message.from_user.id}, username={message.from_user.username}")
        insufficient_rights(message)
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /grant: user_id={message.from_user.id}")
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant @username")
        return
    username = parts[1].strip()
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: username={username}")
    if set_privilege(username, 1):
        logger.info(f"–ü—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: username={username}")
        bot.reply_to(message, f"–ü—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}.")
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: username={username}")
        bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è "
                              f"—É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ò–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–≤—Å–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")



@bot.message_handler(commands=['revoke'])
def revoke_cmd(message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /revoke –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    if not is_director(message.from_user.username):
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /revoke: user_id={message.from_user.id}, username={message.from_user.username}")
        insufficient_rights(message)
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /revoke: user_id={message.from_user.id}")
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke @username")
        return
    username = parts[1].strip()
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: username={username}")
    if set_privilege(username, 0):
        logger.info(f"–ü—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: username={username}")
        bot.reply_to(message, f"–ü—Ä–∞–≤–∞ –∑–∞–±—Ä–∞–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}.")
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: username={username}")
        bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —É {username}. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")



@bot.message_handler(commands=['list_staff'])
def list_staff_cmd(message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /list_staff –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    if not is_director(message.from_user.username):
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /list_staff: user_id={message.from_user.id}, username={message.from_user.username}")
        insufficient_rights(message)
        return
    staff = list_staff()
    if not staff:
        logger.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        bot.reply_to(message, "–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return
    logger.info(f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ: {len(staff)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
    text = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n"
    for u in staff:
        uid, uname, fname, lname = u
        logger.debug(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: ID={uid}, username={uname}, first_name={fname}, last_name={lname}")
        text += f"ID: {uid}, @{uname if uname else ''}, {fname or ''} {lname or ''}\n"
    bot.reply_to(message, text)



@bot.message_handler(func=lambda m: True)
def default_handler(message):
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}, text={message.text}")
    bot.reply_to(message,
                 "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.")



if __name__ == "__main__":
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    try:
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã...")
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
