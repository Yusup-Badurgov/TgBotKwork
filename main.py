# main.py
import logging
from config import LOG_LEVEL
from handlers import bot, add_user, send_users_page, send_search_page, insufficient_rights
from db import user_has_privileges, is_director, set_privilege, list_staff, search_users, get_user_by_id
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=LOG_LEVEL, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_NONE = None
STATE_SEARCH_USERS = 'search_users'
STATE_GRANT = 'grant'
STATE_REVOKE = 'revoke'


@bot.chat_join_request_handler()
def handle_chat_join_request(chat_join_request):
    logger.info(
        f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: user_id={chat_join_request.from_user.id}, username={chat_join_request.from_user.username}")
    bot.approve_chat_join_request(chat_join_request.chat.id, chat_join_request.from_user.id)
    user = chat_join_request.from_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: user_id={user.id}, username={user.username}, first_name={user.first_name}, last_name={user.last_name}")


@bot.message_handler(commands=['start'])
def start_cmd(message):
    logger.info(
        f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states.pop(message.from_user.id, None)
    text = ("–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–≠—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ—Ö—Ä–∞–Ω—è—é –∏—Ö –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É,"
            "–¥–æ–±–∞–≤–ª—è—é –∑–∞–ø–∏—Å—å –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã, –∞ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø–æ–∑–≤–æ–ª—è—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. "
            "–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –¥–ª—è —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã—Ö –ª–∏—Ü –¥–æ—Å—Ç—É–ø–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help.")
    bot.reply_to(message, text)


@bot.message_handler(commands=['help'])
def help_cmd(message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –°—Ç–∞—Ä—Ç / –†–µ—Å—Ç–∞—Ä—Ç\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.\n\n"
        "<b>–î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>\n"
        "/list_users [–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã] - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (–ø–æ 10 –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ).\n"
        "/search_users - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username, –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ ID.\n"
        "/list_staff - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∞–º–∏).\n\n"
        "<b>–¢–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:</b>\n"
        "/grant - –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
        "/revoke - –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
    )
    bot.reply_to(message, text, parse_mode='HTML')


@bot.message_handler(commands=['list_users'])
def list_users_cmd(message):
    logger.info(
        f"–ö–æ–º–∞–Ω–¥–∞ /list_users –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    if not user_has_privileges(message.from_user.username):
        logger.warning(
            f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: user_id={message.from_user.id}, username={message.from_user.username}")
        insufficient_rights(message)
        return

    parts = message.text.split(maxsplit=1)
    page = 1
    if len(parts) > 1 and parts[1].isdigit():
        page = int(parts[1])
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page}")

    send_users_page(message.chat.id, page=page)


@bot.message_handler(commands=['list_staff'])
def list_staff_cmd(message):
    logger.info(
        f"–ö–æ–º–∞–Ω–¥–∞ /list_staff –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    if not user_has_privileges(message.from_user.username):
        logger.warning(
            f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: user_id={message.from_user.id}, username={message.from_user.username}")
        insufficient_rights(message)
        return

    staff = list_staff()
    if not staff:
        logger.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        bot.reply_to(message, "–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    logger.info(f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ: {len(staff)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
    text = "üìã <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:</b>\n\n"
    for u in staff:
        uid, uname, fname, lname = u
        logger.debug(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: ID={uid}, username={uname}, first_name={fname}, last_name={lname}")
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ID, @username, –ò–º—è –§–∞–º–∏–ª–∏—è
        user_info = f"ID: {uid}"
        if uname:
            user_info += f", @{uname}"
        if fname or lname:
            user_info += f", {fname or ''} {lname or ''}".strip()
        text += f"{user_info}\n"

    bot.reply_to(message, text, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data.startswith('users_page:'))
def callback_users_page(call):
    logger.info(
        f"–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ 'users_page': user_id={call.from_user.id}, username={call.from_user.username}, data={call.data}")
    if not user_has_privileges(call.from_user.username):
        logger.warning(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={call.from_user.id}, username={call.from_user.username}")
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    page = int(call.data.split(':')[1])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page}")

    send_users_page(call.message.chat.id, page=page, message_id=call.message.message_id)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('user_details:'))
def callback_user_details(call):
    logger.info(
        f"–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ 'user_details': user_id={call.from_user.id}, username={call.from_user.username}, data={call.data}")
    if not user_has_privileges(call.from_user.username):
        logger.warning(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={call.from_user.id}, username={call.from_user.username}")
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    _, user_id_str, page_str = call.data.split(':')
    user_id = int(user_id_str)
    page = int(page_str)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞={page}")

    user = get_user_by_id(user_id)
    if not user:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    uid, uname, fname, lname, priv = user
    pmark = "‚úÖ" if priv == 1 else "‚ùå"
    logger.info(
        f"–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã: user_id={uid}, username={uname}, –∏–º—è={fname}, —Ñ–∞–º–∏–ª–∏—è={lname}, –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏={pmark}")

    text = (f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"ID: {uid}\n"
            f"Username: @{uname if uname else '–Ω–µ—Ç'}\n"
            f"–ò–º—è: {fname or '–Ω–µ—Ç'}\n"
            f"–§–∞–º–∏–ª–∏—è: {lname or '–Ω–µ—Ç'}\n"
            f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: {pmark}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")

    keyboard = types.InlineKeyboardMarkup()
    if uname:
        logger.debug("–§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ username.")
        keyboard.add(types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"https://t.me/{uname}"))
    else:
        logger.debug("–§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ user_id.")
        keyboard.add(types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"tg://user?id={uid}"))

    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"users_page:{page}"))

    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard,
                              parse_mode='HTML')
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    bot.answer_callback_query(call.id)


@bot.message_handler(commands=['search_users'])
def search_users_cmd(message):
    logger.info(
        f"–ö–æ–º–∞–Ω–¥–∞ /search_users –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    if not user_has_privileges(message.from_user.username):
        logger.warning(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
        insufficient_rights(message)
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[message.from_user.id] = STATE_SEARCH_USERS
    logger.debug(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ STATE_SEARCH_USERS –¥–ª—è user_id={message.from_user.id}")
    bot.reply_to(
        message,
        "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n–í–≤–µ–¥–∏—Ç–µ `username`, `first_name`, `last_name` –∏–ª–∏ `ID` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode='Markdown'
    )


@bot.message_handler(commands=['grant'])
def grant_cmd(message):
    logger.info(
        f"–ö–æ–º–∞–Ω–¥–∞ /grant –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    if not is_director(message.from_user.username):
        logger.warning(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /grant: user_id={message.from_user.id}, username={message.from_user.username}")
        insufficient_rights(message)
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[message.from_user.id] = STATE_GRANT
    logger.debug(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ STATE_GRANT –¥–ª—è user_id={message.from_user.id}")
    bot.reply_to(
        message,
        "üõ† –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...\n–£–∫–∞–∂–∏—Ç–µ `@username` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode='Markdown'
    )


@bot.message_handler(commands=['revoke'])
def revoke_cmd(message):
    logger.info(
        f"–ö–æ–º–∞–Ω–¥–∞ /revoke –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={message.from_user.id}, username={message.from_user.username}")
    if not is_director(message.from_user.username):
        logger.warning(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /revoke: user_id={message.from_user.id}, username={message.from_user.username}")
        insufficient_rights(message)
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[message.from_user.id] = STATE_REVOKE
    logger.debug(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ STATE_REVOKE –¥–ª—è user_id={message.from_user.id}")
    bot.reply_to(
        message,
        "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...\n–£–∫–∞–∂–∏—Ç–µ `@username` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode='Markdown'
    )


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    state = user_states.get(user_id, STATE_NONE)
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {state}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
    if message.text.startswith('/'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        command = message.text.split()[0]
        logger.debug(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{command}' –≤–æ –≤—Ä–µ–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {state}")
        # –í—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        if command == '/start':
            start_cmd(message)
        elif command == '/help':
            help_cmd(message)
        elif command == '/list_users':
            list_users_cmd(message)
        elif command == '/list_staff':
            list_staff_cmd(message)
        elif command == '/search_users':
            search_users_cmd(message)
        elif command == '/grant':
            grant_cmd(message)
        elif command == '/revoke':
            revoke_cmd(message)
        else:
            logger.warning(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}, username={message.from_user.username}, text={message.text}")
            bot.reply_to(message,
                         "‚ùå –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.")
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if state == STATE_SEARCH_USERS:
        handle_search_users(message)
    elif state == STATE_GRANT:
        handle_grant(message)
    elif state == STATE_REVOKE:
        handle_revoke(message)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.warning(
            f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}, username={message.from_user.username}, text={message.text}")
        bot.reply_to(message,
                     "‚ùì –Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π /help.")


def handle_search_users(message):
    query = message.text.strip()
    user_id = message.from_user.id
    logger.info(
        f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}' –æ—Ç user_id={user_id}, username={message.from_user.username}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states.pop(user_id, None)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    results = search_users(query)
    if not results:
        logger.info(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        bot.reply_to(message, "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    send_search_page(message.chat.id, query, page=1)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={user_id}")


def handle_grant(message):
    username = message.text.strip()
    user_id = message.from_user.id
    logger.info(
        f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: '{username}' –æ—Ç user_id={user_id}, username={message.from_user.username}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    if not username.startswith('@') or len(username) < 2:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username: '{username}'")
        bot.reply_to(
            message,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `@username`.",
            parse_mode='Markdown'
        )
        # –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return

    # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username
    clean_username = username[1:]
    if set_privilege(clean_username, 1):
        logger.info(f"–ü—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: @{clean_username}")
        bot.reply_to(message, f"‚úÖ –ü—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{clean_username}.")
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: @{clean_username}")
        bot.reply_to(
            message,
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{clean_username}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è "
            f"—É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á—Ç–æ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )
        # –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    user_states.pop(user_id, None)


def handle_revoke(message):
    username = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"–û—Ç–∑—ã–≤ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{username}' –æ—Ç user_id={user_id}, username={message.from_user.username}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    if not username.startswith('@') or len(username) < 2:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username: '{username}'")
        bot.reply_to(
            message,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `@username`.",
            parse_mode='Markdown'
        )
        # –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return

    # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username
    clean_username = username[1:]
    if set_privilege(clean_username, 0):
        logger.info(f"–ü—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{clean_username}")
        bot.reply_to(message, f"‚úÖ –ü—Ä–∞–≤–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{clean_username}.")
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{clean_username}")
        bot.reply_to(
            message,
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{clean_username}. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        # –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    user_states.pop(user_id, None)


@bot.callback_query_handler(func=lambda call: call.data.startswith('search_user_details:'))
def callback_search_user_details(call):
    logger.info(
        f"–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ 'search_user_details': user_id={call.from_user.id}, username={call.from_user.username}, data={call.data}")
    if not user_has_privileges(call.from_user.username):
        logger.warning(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={call.from_user.id}, username={call.from_user.username}")
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        _, uid_str, page_str, enc_query = call.data.split(':', 3)
        user_id = int(uid_str)
        page = int(page_str)
        query = enc_query.replace('%20', ' ')
    except ValueError as e:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}. –û—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞={page}, –∑–∞–ø—Ä–æ—Å='{query}'")

    user = get_user_by_id(user_id)
    if not user:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    uid, uname, fname, lname, priv = user
    pmark = "‚úÖ" if priv == 1 else "‚ùå"
    logger.info(
        f"–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã: user_id={uid}, username={uname}, –∏–º—è={fname}, —Ñ–∞–º–∏–ª–∏—è={lname}, –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏={pmark}")

    text = (f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"ID: {uid}\n"
            f"–ò–º—è: {fname or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} {lname or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"Username: @{uname if uname else '–Ω–µ—Ç'}\n"
            f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: {pmark}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")

    keyboard = types.InlineKeyboardMarkup()
    if uname:
        logger.debug("–§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ username.")
        keyboard.add(types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"https://t.me/{uname}"))
    else:
        logger.debug("–§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ user_id.")
        keyboard.add(types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"tg://user?id={uid}"))

    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"search_page:{page}:{enc_query}"))

    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard,
                              parse_mode='HTML')
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('user_details:'))
def callback_user_details(call):
    logger.info(
        f"–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ 'user_details': user_id={call.from_user.id}, username={call.from_user.username}, data={call.data}")
    if not user_has_privileges(call.from_user.username):
        logger.warning(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={call.from_user.id}, username={call.from_user.username}")
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        _, uid_str, page_str = call.data.split(':')
        user_id = int(uid_str)
        page = int(page_str)
    except ValueError as e:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}. –û—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞={page}")

    user = get_user_by_id(user_id)
    if not user:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    uid, uname, fname, lname, priv = user
    pmark = "‚úÖ" if priv == 1 else "‚ùå"
    logger.info(
        f"–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã: user_id={uid}, username={uname}, –∏–º—è={fname}, —Ñ–∞–º–∏–ª–∏—è={lname}, –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏={pmark}")

    text = (f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"ID: {uid}\n"
            f"–ò–º—è: {fname or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} {lname or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"Username: @{uname if uname else '–Ω–µ—Ç'}\n"
            f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: {pmark}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")

    keyboard = types.InlineKeyboardMarkup()
    if uname:
        logger.debug("–§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ username.")
        keyboard.add(types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"https://t.me/{uname}"))
    else:
        logger.debug("–§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ user_id.")
        keyboard.add(types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"tg://user?id={uid}"))

    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"users_page:{page}:"))

    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard,
                              parse_mode='HTML')
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('search_page:'))
def callback_search_page(call):
    logger.info(
        f"–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ 'search_page': user_id={call.from_user.id}, username={call.from_user.username}, data={call.data}")
    if not user_has_privileges(call.from_user.username):
        logger.warning(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={call.from_user.id}, username={call.from_user.username}")
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    try:
        _, page_str, enc_query = call.data.split(':', 2)
        page = int(page_str)
        query = enc_query.replace('%20', ' ')
    except ValueError as e:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}. –û—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞: page={page}, query='{query}'")

    send_search_page(call.message.chat.id, query=query, page=page, message_id=call.message.message_id)
    bot.answer_callback_query(call.id)


if __name__ == "__main__":
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    try:
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã...")
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
